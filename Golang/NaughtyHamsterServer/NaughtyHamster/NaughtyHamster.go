// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package naughtyHamster

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// NaughtyHamsterMetaData contains all meta data concerning the NaughtyHamster NaughtyHamster.
var NaughtyHamsterMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintMaxSize_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerIsContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintMoreThanAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintStop\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedSendMoreETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInWhiteList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicMintIsNotBegin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReachMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotExistent\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DevWhiteListMintMaxCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IsMinting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MintMaxSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NormalWhiteListMintMaxCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWhiteListRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"getNumberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpenBoxTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicMintOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalWhiteListRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openBoxTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_devRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_normalRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleTreeRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMintState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openTime\",\"type\":\"uint256\"}],\"name\":\"setOpenBoxTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"setPublicMintStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"whiteListMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a060405273b67a775281a631fe37b886fbb6f7da6613bc96f2600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555063ffffffff600a5563ffffffff600b556001600c60006101000a81548160ff0219169083151502179055506000801b600d556000801b600e553480156200009f57600080fd5b5060405162004b1c38038062004b1c8339818101604052810190620000c59190620002af565b6040518060400160405280601381526020017f4e6175676874792048616d73746572204e4654000000000000000000000000008152506040518060400160405280600f81526020017f4e6175676874792048616d737465720000000000000000000000000000000000815250816001908162000142919062000551565b50806002908162000154919062000551565b50620001656200019c60201b60201c565b60048190555050506200018d62000181620001a160201b60201c565b620001a960201b60201c565b80608081815250505062000638565b600090565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620002898162000274565b81146200029557600080fd5b50565b600081519050620002a9816200027e565b92915050565b600060208284031215620002c857620002c76200026f565b5b6000620002d88482850162000298565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200036357607f821691505b6020821081036200037957620003786200031b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003e37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003a4565b620003ef8683620003a4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004326200042c620004268462000274565b62000407565b62000274565b9050919050565b6000819050919050565b6200044e8362000411565b620004666200045d8262000439565b848454620003b1565b825550505050565b600090565b6200047d6200046e565b6200048a81848462000443565b505050565b5b81811015620004b257620004a660008262000473565b60018101905062000490565b5050565b601f8211156200050157620004cb816200037f565b620004d68462000394565b81016020851015620004e6578190505b620004fe620004f58562000394565b8301826200048f565b50505b505050565b600082821c905092915050565b6000620005266000198460080262000506565b1980831691505092915050565b600062000541838362000513565b9150826002028217905092915050565b6200055c82620002e1565b67ffffffffffffffff811115620005785762000577620002ec565b5b6200058482546200034a565b62000591828285620004b6565b600060209050601f831160018114620005c95760008415620005b4578287015190505b620005c0858262000533565b86555062000630565b601f198416620005d9866200037f565b60005b828110156200060357848901518255600182019150602085019450602081019050620005dc565b868310156200062357848901516200061f601f89168262000513565b8355505b6001600288020188555050505b505050505050565b6080516144b36200066960003960008181610dea0152818161108601528181611a4f0152611ba101526144b36000f3fe60806040526004361061023b5760003560e01c80638462151c1161012e578063bda4db87116100ab578063e88b446d1161006f578063e88b446d14610866578063e985e9c514610891578063f19e75d4146108ce578063f2fde38b146108f7578063f5c04fa4146109205761023b565b8063bda4db871461077f578063c002d23d146107aa578063c87b56dd146107d5578063d3cf00a314610812578063e2d5e6671461083d5761023b565b8063a22cb465116100f2578063a22cb465146106c0578063ac446002146106e9578063b1d87db914610700578063b6945c491461072b578063b88d4fde146107565761023b565b80638462151c146105c55780638a59a7fd146106025780638da5cb5b1461063f57806395d89b411461066a5780639fe682de146106955761023b565b80632db11544116101bc5780635fcd80a6116101805780635fcd80a6146104e05780636352211e1461050957806370a0823114610546578063715018a614610583578063740f89381461059a5761023b565b80632db115441461040a57806342842e0e146104265780634554679f1461044f578063486eb389146104785780634d388a98146104a35761023b565b80630feed7b2116102035780630feed7b214610339578063118768751461036457806318160ddd1461038d57806323b872dd146103b857806326412aca146103e15761023b565b806301ffc9a71461024057806306fdde031461027d578063081812fc146102a8578063095ea7b3146102e55780630d96649c1461030e575b600080fd5b34801561024c57600080fd5b5061026760048036038101906102629190612d2e565b61094b565b6040516102749190612d76565b60405180910390f35b34801561028957600080fd5b50610292610a2d565b60405161029f9190612e21565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca9190612e79565b610abf565b6040516102dc9190612ee7565b60405180910390f35b3480156102f157600080fd5b5061030c60048036038101906103079190612f2e565b610b44565b005b34801561031a57600080fd5b50610323610c5b565b6040516103309190612f87565b60405180910390f35b34801561034557600080fd5b5061034e610c61565b60405161035b9190612d76565b60405180910390f35b34801561037057600080fd5b5061038b60048036038101906103869190613116565b610c74565b005b34801561039957600080fd5b506103a2610f07565b6040516103af9190613181565b60405180910390f35b3480156103c457600080fd5b506103df60048036038101906103da919061319c565b610f16565b005b3480156103ed57600080fd5b506104086004803603810190610403919061321b565b610f76565b005b610424600480360381019061041f9190612e79565b610f9b565b005b34801561043257600080fd5b5061044d6004803603810190610448919061319c565b61119f565b005b34801561045b57600080fd5b5061047660048036038101906104719190613248565b6111bf565b005b34801561048457600080fd5b5061048d6111d9565b60405161049a9190613181565b60405180910390f35b3480156104af57600080fd5b506104ca60048036038101906104c59190613288565b6111df565b6040516104d79190613181565b60405180910390f35b3480156104ec57600080fd5b5061050760048036038101906105029190612e79565b6111f7565b005b34801561051557600080fd5b50610530600480360381019061052b9190612e79565b611209565b60405161053d9190612ee7565b60405180910390f35b34801561055257600080fd5b5061056d60048036038101906105689190613288565b611221565b60405161057a9190613181565b60405180910390f35b34801561058f57600080fd5b50610598611320565b005b3480156105a657600080fd5b506105af611334565b6040516105bc9190612ee7565b60405180910390f35b3480156105d157600080fd5b506105ec60048036038101906105e79190613288565b61135a565b6040516105f99190613373565b60405180910390f35b34801561060e57600080fd5b5061062960048036038101906106249190613288565b611453565b6040516106369190613181565b60405180910390f35b34801561064b57600080fd5b5061065461149c565b6040516106619190612ee7565b60405180910390f35b34801561067657600080fd5b5061067f6114c6565b60405161068c9190612e21565b60405180910390f35b3480156106a157600080fd5b506106aa611558565b6040516106b79190612f87565b60405180910390f35b3480156106cc57600080fd5b506106e760048036038101906106e29190613395565b61155e565b005b3480156106f557600080fd5b506106fe6116de565b005b34801561070c57600080fd5b50610715611800565b6040516107229190613181565b60405180910390f35b34801561073757600080fd5b50610740611805565b60405161074d9190612d76565b60405180910390f35b34801561076257600080fd5b5061077d6004803603810190610778919061348a565b611812565b005b34801561078b57600080fd5b50610794611874565b6040516107a19190612d76565b60405180910390f35b3480156107b657600080fd5b506107bf611881565b6040516107cc9190613181565b60405180910390f35b3480156107e157600080fd5b506107fc60048036038101906107f79190612e79565b61188c565b6040516108099190612e21565b60405180910390f35b34801561081e57600080fd5b50610827611994565b6040516108349190613181565b60405180910390f35b34801561084957600080fd5b50610864600480360381019061085f9190612e79565b61199a565b005b34801561087257600080fd5b5061087b6119ac565b6040516108889190613181565b60405180910390f35b34801561089d57600080fd5b506108b860048036038101906108b3919061350d565b6119b1565b6040516108c59190612d76565b60405180910390f35b3480156108da57600080fd5b506108f560048036038101906108f09190612e79565b611a45565b005b34801561090357600080fd5b5061091e60048036038101906109199190613288565b611b1c565b005b34801561092c57600080fd5b50610935611b9f565b6040516109429190613181565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a1657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a265750610a2582611bc3565b5b9050919050565b606060018054610a3c9061357c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a689061357c565b8015610ab55780601f10610a8a57610100808354040283529160200191610ab5565b820191906000526020600020905b815481529060010190602001808311610a9857829003601f168201915b5050505050905090565b6000610aca82611c2d565b610b09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b009061361f565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b4f82611209565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb6906136b1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610bde611c53565b73ffffffffffffffffffffffffffffffffffffffff161480610c0d5750610c0c81610c07611c53565b6119b1565b5b610c4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4390613743565b60405180910390fd5b610c568383611c5b565b505050565b600d5481565b600c60009054906101000a900460ff1681565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614610cd9576040517f7df1f81700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600c60009054906101000a900460ff16610d1f576040517fdf5e513300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610d518233604051602001610d3691906137ab565b60405160208183030381529060405280519060200120611d14565b905060006002811115610d6757610d666137c6565b5b816002811115610d7a57610d796137c6565b5b03610db1576040517f9ad59b9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001905060016002811115610dcb57610dca6137c6565b5b826002811115610dde57610ddd6137c6565b5b03610de857600a90505b7f000000000000000000000000000000000000000000000000000000000000000084610e12610f07565b610e1c9190613824565b1115610e54576040517f688ef65c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8084610e5f33611453565b610e699190613824565b1115610ea1576040517fb234809100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ef09190613824565b92505081905550610f013385611d57565b50505050565b6000610f11611d75565b905090565b610f27610f21611c53565b82611d91565b610f66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5d906138ca565b60405180910390fd5b610f71838383611e6f565b505050565b610f7e6120f6565b80600c60006101000a81548160ff02191690831515021790555050565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611000576040517f7df1f81700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600c60009054906101000a900460ff16611046576040517fdf5e513300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61104e611805565b611084576040517f7f45eeef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000816110ae610f07565b6110b89190613824565b11156110f0576040517f688ef65c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80662386f26fc1000061110391906138ea565b34101561113c576040517fa733df5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461118b9190613824565b9250508190555061119c3382611d57565b50565b6111ba83838360405180602001604052806000815250611812565b505050565b6111c76120f6565b81600d8190555080600e819055505050565b600b5481565b60086020528060005260406000206000915090505481565b6111ff6120f6565b80600a8190555050565b60008061121583612174565b50905080915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611291576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112889061399e565b60405180910390fd5b60008061129c612205565b90505b6112a761220a565b811015611316576112b781611c2d565b15611305576112c581611209565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036113045781611301906139be565b91505b5b8061130f906139be565b905061129f565b5080915050919050565b6113286120f6565b6113326000612214565b565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008061136884611221565b905060008167ffffffffffffffff81111561138657611385612fa7565b5b6040519080825280602002602001820160405280156113b45781602001602082028036833780820191505090505b50905060006113c1612205565b90505b828414611447576113d481611c2d565b1561143c578573ffffffffffffffffffffffffffffffffffffffff166113f982611209565b73ffffffffffffffffffffffffffffffffffffffff160361143b578082858060010196508151811061142e5761142d613a06565b5b6020026020010181815250505b5b8060010190506113c4565b50809350505050919050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600280546114d59061357c565b80601f01602080910402602001604051908101604052809291908181526020018280546115019061357c565b801561154e5780601f106115235761010080835404028352916020019161154e565b820191906000526020600020905b81548152906001019060200180831161153157829003601f168201915b5050505050905090565b600e5481565b611566611c53565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ca90613a81565b60405180910390fd5b80600660006115e0611c53565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661168d611c53565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116d29190612d76565b60405180910390a35050565b6116e66120f6565b60004790506000811161172e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172590613aed565b60405180910390fd5b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161177690613b3e565b60006040518083038185875af1925050503d80600081146117b3576040519150601f19603f3d011682016040523d82523d6000602084013e6117b8565b606091505b50509050806117fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f390613b9f565b60405180910390fd5b5050565b600181565b6000600a54421015905090565b61182361181d611c53565b83611d91565b611862576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611859906138ca565b60405180910390fd5b61186e848484846122da565b50505050565b6000600b54421015905090565b662386f26fc1000081565b606061189782611c2d565b6118cd576040517fe7cb657c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118d5611874565b6118f95760405180608001604052806042815260200161433c60429139905061198f565b60006040518060400160405280600581526020017f2e6a736f6e0000000000000000000000000000000000000000000000000000008152509050600061193e84612338565b82604051602001611950929190613bfb565b6040516020818303038152906040529050611969612406565b8160405160200161197b929190613bfb565b604051602081830303815290604052925050505b919050565b600a5481565b6119a26120f6565b80600b8190555050565b600a81565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611a4d6120f6565b7f000000000000000000000000000000000000000000000000000000000000000081611a77610f07565b611a819190613824565b1115611ab9576040517f688ef65c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b089190613824565b92505081905550611b193382611d57565b50565b611b246120f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8a90613c91565b60405180910390fd5b611b9c81612214565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000611c3761220a565b82108015611c4c575081611c49612205565b11155b9050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611cce83611209565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611d2383600d5484612426565b15611d315760019050611d51565b611d3e83600e5484612426565b15611d4c5760029050611d51565b600090505b92915050565b611d7182826040518060200160405280600081525061243d565b5050565b6000611d7f612205565b600454611d8c9190613cb1565b905090565b6000611d9c82611c2d565b611ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd290613d57565b60405180910390fd5b6000611de683611209565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e5557508373ffffffffffffffffffffffffffffffffffffffff16611e3d84610abf565b73ffffffffffffffffffffffffffffffffffffffff16145b80611e665750611e6581856119b1565b5b91505092915050565b600080611e7b83612174565b915091508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee490613de9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611f5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5390613e7b565b60405180910390fd5b611f6985858560016124a6565b611f74600084611c5b565b6000600184611f839190613824565b9050611f998160006124ac90919063ffffffff16565b158015611fac5750611fa961220a565b81105b1561201857856003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061201781600061250790919063ffffffff16565b5b846003600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508184146120865761208584600061250790919063ffffffff16565b5b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120ee8686866001612564565b505050505050565b6120fe611c53565b73ffffffffffffffffffffffffffffffffffffffff1661211c61149c565b73ffffffffffffffffffffffffffffffffffffffff1614612172576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216990613ee7565b60405180910390fd5b565b60008061218083611c2d565b6121bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b690613f79565b60405180910390fd5b6121c88361256a565b90506003600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150915091565b600090565b6000600454905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6122e5848484611e6f565b6122f3848484600185612587565b612332576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123299061400b565b60405180910390fd5b50505050565b60606000600161234784612749565b01905060008167ffffffffffffffff81111561236657612365612fa7565b5b6040519080825280601f01601f1916602001820160405280156123985781602001600182028036833780820191505090505b509050600082602001820190505b6001156123fb578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816123ef576123ee61402b565b5b049450600085036123a6575b819350505050919050565b60606040518060800160405280604881526020016142f460489139905090565b600082612433858461289c565b1490509392505050565b600061244761220a565b905061245384846128f2565b612461600085838686612587565b6124a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124979061400b565b60405180910390fd5b50505050565b50505050565b600080600883901c9050600060ff84167f8000000000000000000000000000000000000000000000000000000000000000901c9050600081866000016000858152602001908152602001600020541614159250505092915050565b6000600882901c9050600060ff83167f8000000000000000000000000000000000000000000000000000000000000000901c9050808460000160008481526020019081526020016000206000828254179250508190555050505050565b50505050565b6000612580826000612ad790919063ffffffff16565b9050919050565b60006125a88573ffffffffffffffffffffffffffffffffffffffff16612bd0565b1561273b576001905060008490505b83856125c39190613824565b811015612735578573ffffffffffffffffffffffffffffffffffffffff1663150b7a026125ee611c53565b8984876040518563ffffffff1660e01b815260040161261094939291906140af565b6020604051808303816000875af192505050801561264c57506040513d601f19601f820116820180604052508101906126499190614110565b60015b6126ce573d806000811461267c576040519150601f19603f3d011682016040523d82523d6000602084013e612681565b606091505b5060008151036126c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126bd9061400b565b60405180910390fd5b805181602001fd5b82801561271f575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b925050808061272d906139be565b9150506125b7565b50612740565b600190505b95945050505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106127a7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161279d5761279c61402b565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106127e4576d04ee2d6d415b85acef810000000083816127da576127d961402b565b5b0492506020810190505b662386f26fc10000831061281357662386f26fc1000083816128095761280861402b565b5b0492506010810190505b6305f5e100831061283c576305f5e10083816128325761283161402b565b5b0492506008810190505b61271083106128615761271083816128575761285661402b565b5b0492506004810190505b60648310612884576064838161287a5761287961402b565b5b0492506002810190505b600a8310612893576001810190505b80915050919050565b60008082905060005b84518110156128e7576128d2828683815181106128c5576128c4613a06565b5b6020026020010151612bf3565b915080806128df906139be565b9150506128a5565b508091505092915050565b60006128fc61220a565b905060008211612941576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612938906141af565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036129b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a790614241565b60405180910390fd5b6129bd60008483856124a6565b81600460008282546129cf9190613824565b92505081905550826003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612a3c81600061250790919063ffffffff16565b612a496000848385612564565b60008190505b8282612a5b9190613824565b811015612ad157808473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a48080612ac9906139be565b915050612a4f565b50505050565b600080600883901c9050600060ff8416905060008560000160008481526020019081526020016000205490508160ff1881901c90506000811115612b3057612b1e81612c1e565b60ff168203600884901b179350612bc7565b5b600115612bc65760008311612b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b72906142d3565b60405180910390fd5b8280600190039350508560000160008481526020019081526020016000205490506000811115612bc157612bae81612c1e565b60ff0360ff16600884901b179350612bc6565b612b31565b5b50505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000818310612c0b57612c068284612c90565b612c16565b612c158383612c90565b5b905092915050565b6000604051806101200160405280610100815260200161437e610100913960f87e818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff612c6785612ca7565b02901c81518110612c7b57612c7a613a06565b5b602001015160f81c60f81b60f81c9050919050565b600082600052816020526040600020905092915050565b6000808211612cb557600080fd5b8160000382169050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d0b81612cd6565b8114612d1657600080fd5b50565b600081359050612d2881612d02565b92915050565b600060208284031215612d4457612d43612ccc565b5b6000612d5284828501612d19565b91505092915050565b60008115159050919050565b612d7081612d5b565b82525050565b6000602082019050612d8b6000830184612d67565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612dcb578082015181840152602081019050612db0565b60008484015250505050565b6000601f19601f8301169050919050565b6000612df382612d91565b612dfd8185612d9c565b9350612e0d818560208601612dad565b612e1681612dd7565b840191505092915050565b60006020820190508181036000830152612e3b8184612de8565b905092915050565b6000819050919050565b612e5681612e43565b8114612e6157600080fd5b50565b600081359050612e7381612e4d565b92915050565b600060208284031215612e8f57612e8e612ccc565b5b6000612e9d84828501612e64565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ed182612ea6565b9050919050565b612ee181612ec6565b82525050565b6000602082019050612efc6000830184612ed8565b92915050565b612f0b81612ec6565b8114612f1657600080fd5b50565b600081359050612f2881612f02565b92915050565b60008060408385031215612f4557612f44612ccc565b5b6000612f5385828601612f19565b9250506020612f6485828601612e64565b9150509250929050565b6000819050919050565b612f8181612f6e565b82525050565b6000602082019050612f9c6000830184612f78565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612fdf82612dd7565b810181811067ffffffffffffffff82111715612ffe57612ffd612fa7565b5b80604052505050565b6000613011612cc2565b905061301d8282612fd6565b919050565b600067ffffffffffffffff82111561303d5761303c612fa7565b5b602082029050602081019050919050565b600080fd5b61305c81612f6e565b811461306757600080fd5b50565b60008135905061307981613053565b92915050565b600061309261308d84613022565b613007565b905080838252602082019050602084028301858111156130b5576130b461304e565b5b835b818110156130de57806130ca888261306a565b8452602084019350506020810190506130b7565b5050509392505050565b600082601f8301126130fd576130fc612fa2565b5b813561310d84826020860161307f565b91505092915050565b6000806040838503121561312d5761312c612ccc565b5b600061313b85828601612e64565b925050602083013567ffffffffffffffff81111561315c5761315b612cd1565b5b613168858286016130e8565b9150509250929050565b61317b81612e43565b82525050565b60006020820190506131966000830184613172565b92915050565b6000806000606084860312156131b5576131b4612ccc565b5b60006131c386828701612f19565b93505060206131d486828701612f19565b92505060406131e586828701612e64565b9150509250925092565b6131f881612d5b565b811461320357600080fd5b50565b600081359050613215816131ef565b92915050565b60006020828403121561323157613230612ccc565b5b600061323f84828501613206565b91505092915050565b6000806040838503121561325f5761325e612ccc565b5b600061326d8582860161306a565b925050602061327e8582860161306a565b9150509250929050565b60006020828403121561329e5761329d612ccc565b5b60006132ac84828501612f19565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6132ea81612e43565b82525050565b60006132fc83836132e1565b60208301905092915050565b6000602082019050919050565b6000613320826132b5565b61332a81856132c0565b9350613335836132d1565b8060005b8381101561336657815161334d88826132f0565b975061335883613308565b925050600181019050613339565b5085935050505092915050565b6000602082019050818103600083015261338d8184613315565b905092915050565b600080604083850312156133ac576133ab612ccc565b5b60006133ba85828601612f19565b92505060206133cb85828601613206565b9150509250929050565b600080fd5b600067ffffffffffffffff8211156133f5576133f4612fa7565b5b6133fe82612dd7565b9050602081019050919050565b82818337600083830152505050565b600061342d613428846133da565b613007565b905082815260208101848484011115613449576134486133d5565b5b61345484828561340b565b509392505050565b600082601f83011261347157613470612fa2565b5b813561348184826020860161341a565b91505092915050565b600080600080608085870312156134a4576134a3612ccc565b5b60006134b287828801612f19565b94505060206134c387828801612f19565b93505060406134d487828801612e64565b925050606085013567ffffffffffffffff8111156134f5576134f4612cd1565b5b6135018782880161345c565b91505092959194509250565b6000806040838503121561352457613523612ccc565b5b600061353285828601612f19565b925050602061354385828601612f19565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061359457607f821691505b6020821081036135a7576135a661354d565b5b50919050565b7f4552433732315073693a20617070726f76656420717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613609602f83612d9c565b9150613614826135ad565b604082019050919050565b60006020820190508181036000830152613638816135fc565b9050919050565b7f4552433732315073693a20617070726f76616c20746f2063757272656e74206f60008201527f776e657200000000000000000000000000000000000000000000000000000000602082015250565b600061369b602483612d9c565b91506136a68261363f565b604082019050919050565b600060208201905081810360008301526136ca8161368e565b9050919050565b7f4552433732315073693a20617070726f76652063616c6c6572206973206e6f7460008201527f206f776e6572206e6f7220617070726f76656420666f7220616c6c0000000000602082015250565b600061372d603b83612d9c565b9150613738826136d1565b604082019050919050565b6000602082019050818103600083015261375c81613720565b9050919050565b60008160601b9050919050565b600061377b82613763565b9050919050565b600061378d82613770565b9050919050565b6137a56137a082612ec6565b613782565b82525050565b60006137b78284613794565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061382f82612e43565b915061383a83612e43565b9250828201905080821115613852576138516137f5565b5b92915050565b7f4552433732315073693a207472616e736665722063616c6c6572206973206e6f60008201527f74206f776e6572206e6f7220617070726f766564000000000000000000000000602082015250565b60006138b4603483612d9c565b91506138bf82613858565b604082019050919050565b600060208201905081810360008301526138e3816138a7565b9050919050565b60006138f582612e43565b915061390083612e43565b925082820261390e81612e43565b91508282048414831517613925576139246137f5565b5b5092915050565b7f4552433732315073693a2062616c616e636520717565727920666f722074686560008201527f207a65726f206164647265737300000000000000000000000000000000000000602082015250565b6000613988602d83612d9c565b91506139938261392c565b604082019050919050565b600060208201905081810360008301526139b78161397b565b9050919050565b60006139c982612e43565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139fb576139fa6137f5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732315073693a20617070726f766520746f2063616c6c657200000000600082015250565b6000613a6b601c83612d9c565b9150613a7682613a35565b602082019050919050565b60006020820190508181036000830152613a9a81613a5e565b9050919050565b7f4e6f206574686572206c65667420746f20776974686472617700000000000000600082015250565b6000613ad7601983612d9c565b9150613ae282613aa1565b602082019050919050565b60006020820190508181036000830152613b0681613aca565b9050919050565b600081905092915050565b50565b6000613b28600083613b0d565b9150613b3382613b18565b600082019050919050565b6000613b4982613b1b565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000613b89600f83612d9c565b9150613b9482613b53565b602082019050919050565b60006020820190508181036000830152613bb881613b7c565b9050919050565b600081905092915050565b6000613bd582612d91565b613bdf8185613bbf565b9350613bef818560208601612dad565b80840191505092915050565b6000613c078285613bca565b9150613c138284613bca565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613c7b602683612d9c565b9150613c8682613c1f565b604082019050919050565b60006020820190508181036000830152613caa81613c6e565b9050919050565b6000613cbc82612e43565b9150613cc783612e43565b9250828203905081811115613cdf57613cde6137f5565b5b92915050565b7f4552433732315073693a206f70657261746f7220717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613d41602f83612d9c565b9150613d4c82613ce5565b604082019050919050565b60006020820190508181036000830152613d7081613d34565b9050919050565b7f4552433732315073693a207472616e73666572206f6620746f6b656e2074686160008201527f74206973206e6f74206f776e0000000000000000000000000000000000000000602082015250565b6000613dd3602c83612d9c565b9150613dde82613d77565b604082019050919050565b60006020820190508181036000830152613e0281613dc6565b9050919050565b7f4552433732315073693a207472616e7366657220746f20746865207a65726f2060008201527f6164647265737300000000000000000000000000000000000000000000000000602082015250565b6000613e65602783612d9c565b9150613e7082613e09565b604082019050919050565b60006020820190508181036000830152613e9481613e58565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613ed1602083612d9c565b9150613edc82613e9b565b602082019050919050565b60006020820190508181036000830152613f0081613ec4565b9050919050565b7f4552433732315073693a206f776e657220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613f63602c83612d9c565b9150613f6e82613f07565b604082019050919050565b60006020820190508181036000830152613f9281613f56565b9050919050565b7f4552433732315073693a207472616e7366657220746f206e6f6e20455243373260008201527f31526563656976657220696d706c656d656e7465720000000000000000000000602082015250565b6000613ff5603583612d9c565b915061400082613f99565b604082019050919050565b6000602082019050818103600083015261402481613fe8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b60006140818261405a565b61408b8185614065565b935061409b818560208601612dad565b6140a481612dd7565b840191505092915050565b60006080820190506140c46000830187612ed8565b6140d16020830186612ed8565b6140de6040830185613172565b81810360608301526140f08184614076565b905095945050505050565b60008151905061410a81612d02565b92915050565b60006020828403121561412657614125612ccc565b5b6000614134848285016140fb565b91505092915050565b7f4552433732315073693a207175616e74697479206d757374206265206772656160008201527f7465722030000000000000000000000000000000000000000000000000000000602082015250565b6000614199602583612d9c565b91506141a48261413d565b604082019050919050565b600060208201905081810360008301526141c88161418c565b9050919050565b7f4552433732315073693a206d696e7420746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061422b602383612d9c565b9150614236826141cf565b604082019050919050565b6000602082019050818103600083015261425a8161421e565b9050919050565b7f4269744d6170733a205468652073657420626974206265666f7265207468652060008201527f696e64657820646f65736e27742065786973742e000000000000000000000000602082015250565b60006142bd603483612d9c565b91506142c882614261565b604082019050919050565b600060208201905081810360008301526142ec816142b0565b905091905056fe697066733a2f2f62616679626569647a723761653676676f627a6f756b347a366132786176696c627062346666626f6871696866367a62676c616c346867367a7a6d2f6a736f6e2f697066733a2f2f6261666b7265696672756c6b776162696e766277746478676e6d6c6532776532376e72726f74756b7a757437676862336b6465756c716e646837710001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8a2646970667358221220a32578ab87e0fbb7adf7b9aff305f077804ccd2bf5e8f08057021d3271920d6564736f6c63430008120033",
}

// NaughtyHamsterABI is the input ABI used to generate the binding from.
// Deprecated: Use NaughtyHamsterMetaData.ABI instead.
var NaughtyHamsterABI = NaughtyHamsterMetaData.ABI

// NaughtyHamsterBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NaughtyHamsterMetaData.Bin instead.
var NaughtyHamsterBin = NaughtyHamsterMetaData.Bin

// DeployNaughtyHamster deploys a new Ethereum NaughtyHamster, binding an instance of NaughtyHamster to it.
func DeployNaughtyHamster(auth *bind.TransactOpts, backend bind.ContractBackend, mintMaxSize_ *big.Int) (common.Address, *types.Transaction, *NaughtyHamster, error) {
	parsed, err := NaughtyHamsterMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NaughtyHamsterBin), backend, mintMaxSize_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NaughtyHamster{NaughtyHamsterCaller: NaughtyHamsterCaller{contract: contract}, NaughtyHamsterTransactor: NaughtyHamsterTransactor{contract: contract}, NaughtyHamsterFilterer: NaughtyHamsterFilterer{contract: contract}}, nil
}

// NaughtyHamster is an auto generated Go binding around an Ethereum NaughtyHamster.
type NaughtyHamster struct {
	NaughtyHamsterCaller     // Read-only binding to the NaughtyHamster
	NaughtyHamsterTransactor // Write-only binding to the NaughtyHamster
	NaughtyHamsterFilterer   // Log filterer for NaughtyHamster events
}

// NaughtyHamsterCaller is an auto generated read-only Go binding around an Ethereum NaughtyHamster.
type NaughtyHamsterCaller struct {
	contract *bind.BoundContract // Generic NaughtyHamster wrapper for the low level calls
}

// NaughtyHamsterTransactor is an auto generated write-only Go binding around an Ethereum NaughtyHamster.
type NaughtyHamsterTransactor struct {
	contract *bind.BoundContract // Generic NaughtyHamster wrapper for the low level calls
}

// NaughtyHamsterFilterer is an auto generated log filtering Go binding around an Ethereum NaughtyHamster events.
type NaughtyHamsterFilterer struct {
	contract *bind.BoundContract // Generic NaughtyHamster wrapper for the low level calls
}

// NaughtyHamsterSession is an auto generated Go binding around an Ethereum NaughtyHamster,
// with pre-set call and transact options.
type NaughtyHamsterSession struct {
	Contract     *NaughtyHamster   // Generic NaughtyHamster binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NaughtyHamsterCallerSession is an auto generated read-only Go binding around an Ethereum NaughtyHamster,
// with pre-set call options.
type NaughtyHamsterCallerSession struct {
	Contract *NaughtyHamsterCaller // Generic NaughtyHamster caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// NaughtyHamsterTransactorSession is an auto generated write-only Go binding around an Ethereum NaughtyHamster,
// with pre-set transact options.
type NaughtyHamsterTransactorSession struct {
	Contract     *NaughtyHamsterTransactor // Generic NaughtyHamster transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// NaughtyHamsterRaw is an auto generated low-level Go binding around an Ethereum NaughtyHamster.
type NaughtyHamsterRaw struct {
	Contract *NaughtyHamster // Generic NaughtyHamster binding to access the raw methods on
}

// NaughtyHamsterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum NaughtyHamster.
type NaughtyHamsterCallerRaw struct {
	Contract *NaughtyHamsterCaller // Generic read-only NaughtyHamster binding to access the raw methods on
}

// NaughtyHamsterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum NaughtyHamster.
type NaughtyHamsterTransactorRaw struct {
	Contract *NaughtyHamsterTransactor // Generic write-only NaughtyHamster binding to access the raw methods on
}

// NewNaughtyHamster creates a new instance of NaughtyHamster, bound to a specific deployed NaughtyHamster.
func NewNaughtyHamster(address common.Address, backend bind.ContractBackend) (*NaughtyHamster, error) {
	contract, err := bindNaughtyHamster(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NaughtyHamster{NaughtyHamsterCaller: NaughtyHamsterCaller{contract: contract}, NaughtyHamsterTransactor: NaughtyHamsterTransactor{contract: contract}, NaughtyHamsterFilterer: NaughtyHamsterFilterer{contract: contract}}, nil
}

// NewNaughtyHamsterCaller creates a new read-only instance of NaughtyHamster, bound to a specific deployed NaughtyHamster.
func NewNaughtyHamsterCaller(address common.Address, caller bind.ContractCaller) (*NaughtyHamsterCaller, error) {
	contract, err := bindNaughtyHamster(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NaughtyHamsterCaller{contract: contract}, nil
}

// NewNaughtyHamsterTransactor creates a new write-only instance of NaughtyHamster, bound to a specific deployed NaughtyHamster.
func NewNaughtyHamsterTransactor(address common.Address, transactor bind.ContractTransactor) (*NaughtyHamsterTransactor, error) {
	contract, err := bindNaughtyHamster(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NaughtyHamsterTransactor{contract: contract}, nil
}

// NewNaughtyHamsterFilterer creates a new log filterer instance of NaughtyHamster, bound to a specific deployed NaughtyHamster.
func NewNaughtyHamsterFilterer(address common.Address, filterer bind.ContractFilterer) (*NaughtyHamsterFilterer, error) {
	contract, err := bindNaughtyHamster(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NaughtyHamsterFilterer{contract: contract}, nil
}

// bindNaughtyHamster binds a generic wrapper to an already deployed NaughtyHamster.
func bindNaughtyHamster(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NaughtyHamsterMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) NaughtyHamster method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NaughtyHamster *NaughtyHamsterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NaughtyHamster.Contract.NaughtyHamsterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the NaughtyHamster, calling
// its default method if one is available.
func (_NaughtyHamster *NaughtyHamsterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.NaughtyHamsterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) NaughtyHamster method with params as input values.
func (_NaughtyHamster *NaughtyHamsterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.NaughtyHamsterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) NaughtyHamster method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NaughtyHamster *NaughtyHamsterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NaughtyHamster.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the NaughtyHamster, calling
// its default method if one is available.
func (_NaughtyHamster *NaughtyHamsterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) NaughtyHamster method with params as input values.
func (_NaughtyHamster *NaughtyHamsterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.contract.Transact(opts, method, params...)
}

// DevWhiteListMintMaxCount is a free data retrieval call binding the NaughtyHamster method 0xe88b446d.
//
// Solidity: function DevWhiteListMintMaxCount() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCaller) DevWhiteListMintMaxCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "DevWhiteListMintMaxCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DevWhiteListMintMaxCount is a free data retrieval call binding the NaughtyHamster method 0xe88b446d.
//
// Solidity: function DevWhiteListMintMaxCount() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterSession) DevWhiteListMintMaxCount() (*big.Int, error) {
	return _NaughtyHamster.Contract.DevWhiteListMintMaxCount(&_NaughtyHamster.CallOpts)
}

// DevWhiteListMintMaxCount is a free data retrieval call binding the NaughtyHamster method 0xe88b446d.
//
// Solidity: function DevWhiteListMintMaxCount() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCallerSession) DevWhiteListMintMaxCount() (*big.Int, error) {
	return _NaughtyHamster.Contract.DevWhiteListMintMaxCount(&_NaughtyHamster.CallOpts)
}

// IsMinting is a free data retrieval call binding the NaughtyHamster method 0x0feed7b2.
//
// Solidity: function IsMinting() view returns(bool)
func (_NaughtyHamster *NaughtyHamsterCaller) IsMinting(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "IsMinting")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMinting is a free data retrieval call binding the NaughtyHamster method 0x0feed7b2.
//
// Solidity: function IsMinting() view returns(bool)
func (_NaughtyHamster *NaughtyHamsterSession) IsMinting() (bool, error) {
	return _NaughtyHamster.Contract.IsMinting(&_NaughtyHamster.CallOpts)
}

// IsMinting is a free data retrieval call binding the NaughtyHamster method 0x0feed7b2.
//
// Solidity: function IsMinting() view returns(bool)
func (_NaughtyHamster *NaughtyHamsterCallerSession) IsMinting() (bool, error) {
	return _NaughtyHamster.Contract.IsMinting(&_NaughtyHamster.CallOpts)
}

// MINTPRICE is a free data retrieval call binding the NaughtyHamster method 0xc002d23d.
//
// Solidity: function MINT_PRICE() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCaller) MINTPRICE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "MINT_PRICE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINTPRICE is a free data retrieval call binding the NaughtyHamster method 0xc002d23d.
//
// Solidity: function MINT_PRICE() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterSession) MINTPRICE() (*big.Int, error) {
	return _NaughtyHamster.Contract.MINTPRICE(&_NaughtyHamster.CallOpts)
}

// MINTPRICE is a free data retrieval call binding the NaughtyHamster method 0xc002d23d.
//
// Solidity: function MINT_PRICE() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCallerSession) MINTPRICE() (*big.Int, error) {
	return _NaughtyHamster.Contract.MINTPRICE(&_NaughtyHamster.CallOpts)
}

// MintMaxSize is a free data retrieval call binding the NaughtyHamster method 0xf5c04fa4.
//
// Solidity: function MintMaxSize() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCaller) MintMaxSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "MintMaxSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MintMaxSize is a free data retrieval call binding the NaughtyHamster method 0xf5c04fa4.
//
// Solidity: function MintMaxSize() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterSession) MintMaxSize() (*big.Int, error) {
	return _NaughtyHamster.Contract.MintMaxSize(&_NaughtyHamster.CallOpts)
}

// MintMaxSize is a free data retrieval call binding the NaughtyHamster method 0xf5c04fa4.
//
// Solidity: function MintMaxSize() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCallerSession) MintMaxSize() (*big.Int, error) {
	return _NaughtyHamster.Contract.MintMaxSize(&_NaughtyHamster.CallOpts)
}

// NormalWhiteListMintMaxCount is a free data retrieval call binding the NaughtyHamster method 0xb1d87db9.
//
// Solidity: function NormalWhiteListMintMaxCount() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCaller) NormalWhiteListMintMaxCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "NormalWhiteListMintMaxCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NormalWhiteListMintMaxCount is a free data retrieval call binding the NaughtyHamster method 0xb1d87db9.
//
// Solidity: function NormalWhiteListMintMaxCount() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterSession) NormalWhiteListMintMaxCount() (*big.Int, error) {
	return _NaughtyHamster.Contract.NormalWhiteListMintMaxCount(&_NaughtyHamster.CallOpts)
}

// NormalWhiteListMintMaxCount is a free data retrieval call binding the NaughtyHamster method 0xb1d87db9.
//
// Solidity: function NormalWhiteListMintMaxCount() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCallerSession) NormalWhiteListMintMaxCount() (*big.Int, error) {
	return _NaughtyHamster.Contract.NormalWhiteListMintMaxCount(&_NaughtyHamster.CallOpts)
}

// NumberMinted is a free data retrieval call binding the NaughtyHamster method 0x4d388a98.
//
// Solidity: function _numberMinted(address ) view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCaller) NumberMinted(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "_numberMinted", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumberMinted is a free data retrieval call binding the NaughtyHamster method 0x4d388a98.
//
// Solidity: function _numberMinted(address ) view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterSession) NumberMinted(arg0 common.Address) (*big.Int, error) {
	return _NaughtyHamster.Contract.NumberMinted(&_NaughtyHamster.CallOpts, arg0)
}

// NumberMinted is a free data retrieval call binding the NaughtyHamster method 0x4d388a98.
//
// Solidity: function _numberMinted(address ) view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCallerSession) NumberMinted(arg0 common.Address) (*big.Int, error) {
	return _NaughtyHamster.Contract.NumberMinted(&_NaughtyHamster.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the NaughtyHamster method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the NaughtyHamster method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _NaughtyHamster.Contract.BalanceOf(&_NaughtyHamster.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the NaughtyHamster method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _NaughtyHamster.Contract.BalanceOf(&_NaughtyHamster.CallOpts, owner)
}

// DevWhiteListRoot is a free data retrieval call binding the NaughtyHamster method 0x0d96649c.
//
// Solidity: function devWhiteListRoot() view returns(bytes32)
func (_NaughtyHamster *NaughtyHamsterCaller) DevWhiteListRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "devWhiteListRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DevWhiteListRoot is a free data retrieval call binding the NaughtyHamster method 0x0d96649c.
//
// Solidity: function devWhiteListRoot() view returns(bytes32)
func (_NaughtyHamster *NaughtyHamsterSession) DevWhiteListRoot() ([32]byte, error) {
	return _NaughtyHamster.Contract.DevWhiteListRoot(&_NaughtyHamster.CallOpts)
}

// DevWhiteListRoot is a free data retrieval call binding the NaughtyHamster method 0x0d96649c.
//
// Solidity: function devWhiteListRoot() view returns(bytes32)
func (_NaughtyHamster *NaughtyHamsterCallerSession) DevWhiteListRoot() ([32]byte, error) {
	return _NaughtyHamster.Contract.DevWhiteListRoot(&_NaughtyHamster.CallOpts)
}

// GetApproved is a free data retrieval call binding the NaughtyHamster method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_NaughtyHamster *NaughtyHamsterCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the NaughtyHamster method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_NaughtyHamster *NaughtyHamsterSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _NaughtyHamster.Contract.GetApproved(&_NaughtyHamster.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the NaughtyHamster method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_NaughtyHamster *NaughtyHamsterCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _NaughtyHamster.Contract.GetApproved(&_NaughtyHamster.CallOpts, tokenId)
}

// GetNumberMinted is a free data retrieval call binding the NaughtyHamster method 0x8a59a7fd.
//
// Solidity: function getNumberMinted(address minter) view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCaller) GetNumberMinted(opts *bind.CallOpts, minter common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "getNumberMinted", minter)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNumberMinted is a free data retrieval call binding the NaughtyHamster method 0x8a59a7fd.
//
// Solidity: function getNumberMinted(address minter) view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterSession) GetNumberMinted(minter common.Address) (*big.Int, error) {
	return _NaughtyHamster.Contract.GetNumberMinted(&_NaughtyHamster.CallOpts, minter)
}

// GetNumberMinted is a free data retrieval call binding the NaughtyHamster method 0x8a59a7fd.
//
// Solidity: function getNumberMinted(address minter) view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCallerSession) GetNumberMinted(minter common.Address) (*big.Int, error) {
	return _NaughtyHamster.Contract.GetNumberMinted(&_NaughtyHamster.CallOpts, minter)
}

// IsApprovedForAll is a free data retrieval call binding the NaughtyHamster method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_NaughtyHamster *NaughtyHamsterCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the NaughtyHamster method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_NaughtyHamster *NaughtyHamsterSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _NaughtyHamster.Contract.IsApprovedForAll(&_NaughtyHamster.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the NaughtyHamster method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_NaughtyHamster *NaughtyHamsterCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _NaughtyHamster.Contract.IsApprovedForAll(&_NaughtyHamster.CallOpts, owner, operator)
}

// IsOpenBoxTime is a free data retrieval call binding the NaughtyHamster method 0xbda4db87.
//
// Solidity: function isOpenBoxTime() view returns(bool)
func (_NaughtyHamster *NaughtyHamsterCaller) IsOpenBoxTime(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "isOpenBoxTime")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOpenBoxTime is a free data retrieval call binding the NaughtyHamster method 0xbda4db87.
//
// Solidity: function isOpenBoxTime() view returns(bool)
func (_NaughtyHamster *NaughtyHamsterSession) IsOpenBoxTime() (bool, error) {
	return _NaughtyHamster.Contract.IsOpenBoxTime(&_NaughtyHamster.CallOpts)
}

// IsOpenBoxTime is a free data retrieval call binding the NaughtyHamster method 0xbda4db87.
//
// Solidity: function isOpenBoxTime() view returns(bool)
func (_NaughtyHamster *NaughtyHamsterCallerSession) IsOpenBoxTime() (bool, error) {
	return _NaughtyHamster.Contract.IsOpenBoxTime(&_NaughtyHamster.CallOpts)
}

// IsPublicMintOn is a free data retrieval call binding the NaughtyHamster method 0xb6945c49.
//
// Solidity: function isPublicMintOn() view returns(bool)
func (_NaughtyHamster *NaughtyHamsterCaller) IsPublicMintOn(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "isPublicMintOn")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPublicMintOn is a free data retrieval call binding the NaughtyHamster method 0xb6945c49.
//
// Solidity: function isPublicMintOn() view returns(bool)
func (_NaughtyHamster *NaughtyHamsterSession) IsPublicMintOn() (bool, error) {
	return _NaughtyHamster.Contract.IsPublicMintOn(&_NaughtyHamster.CallOpts)
}

// IsPublicMintOn is a free data retrieval call binding the NaughtyHamster method 0xb6945c49.
//
// Solidity: function isPublicMintOn() view returns(bool)
func (_NaughtyHamster *NaughtyHamsterCallerSession) IsPublicMintOn() (bool, error) {
	return _NaughtyHamster.Contract.IsPublicMintOn(&_NaughtyHamster.CallOpts)
}

// Name is a free data retrieval call binding the NaughtyHamster method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NaughtyHamster *NaughtyHamsterCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the NaughtyHamster method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NaughtyHamster *NaughtyHamsterSession) Name() (string, error) {
	return _NaughtyHamster.Contract.Name(&_NaughtyHamster.CallOpts)
}

// Name is a free data retrieval call binding the NaughtyHamster method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NaughtyHamster *NaughtyHamsterCallerSession) Name() (string, error) {
	return _NaughtyHamster.Contract.Name(&_NaughtyHamster.CallOpts)
}

// NormalWhiteListRoot is a free data retrieval call binding the NaughtyHamster method 0x9fe682de.
//
// Solidity: function normalWhiteListRoot() view returns(bytes32)
func (_NaughtyHamster *NaughtyHamsterCaller) NormalWhiteListRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "normalWhiteListRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// NormalWhiteListRoot is a free data retrieval call binding the NaughtyHamster method 0x9fe682de.
//
// Solidity: function normalWhiteListRoot() view returns(bytes32)
func (_NaughtyHamster *NaughtyHamsterSession) NormalWhiteListRoot() ([32]byte, error) {
	return _NaughtyHamster.Contract.NormalWhiteListRoot(&_NaughtyHamster.CallOpts)
}

// NormalWhiteListRoot is a free data retrieval call binding the NaughtyHamster method 0x9fe682de.
//
// Solidity: function normalWhiteListRoot() view returns(bytes32)
func (_NaughtyHamster *NaughtyHamsterCallerSession) NormalWhiteListRoot() ([32]byte, error) {
	return _NaughtyHamster.Contract.NormalWhiteListRoot(&_NaughtyHamster.CallOpts)
}

// OpenBoxTime is a free data retrieval call binding the NaughtyHamster method 0x486eb389.
//
// Solidity: function openBoxTime() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCaller) OpenBoxTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "openBoxTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OpenBoxTime is a free data retrieval call binding the NaughtyHamster method 0x486eb389.
//
// Solidity: function openBoxTime() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterSession) OpenBoxTime() (*big.Int, error) {
	return _NaughtyHamster.Contract.OpenBoxTime(&_NaughtyHamster.CallOpts)
}

// OpenBoxTime is a free data retrieval call binding the NaughtyHamster method 0x486eb389.
//
// Solidity: function openBoxTime() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCallerSession) OpenBoxTime() (*big.Int, error) {
	return _NaughtyHamster.Contract.OpenBoxTime(&_NaughtyHamster.CallOpts)
}

// Owner is a free data retrieval call binding the NaughtyHamster method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NaughtyHamster *NaughtyHamsterCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the NaughtyHamster method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NaughtyHamster *NaughtyHamsterSession) Owner() (common.Address, error) {
	return _NaughtyHamster.Contract.Owner(&_NaughtyHamster.CallOpts)
}

// Owner is a free data retrieval call binding the NaughtyHamster method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NaughtyHamster *NaughtyHamsterCallerSession) Owner() (common.Address, error) {
	return _NaughtyHamster.Contract.Owner(&_NaughtyHamster.CallOpts)
}

// OwnerOf is a free data retrieval call binding the NaughtyHamster method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_NaughtyHamster *NaughtyHamsterCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the NaughtyHamster method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_NaughtyHamster *NaughtyHamsterSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _NaughtyHamster.Contract.OwnerOf(&_NaughtyHamster.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the NaughtyHamster method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_NaughtyHamster *NaughtyHamsterCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _NaughtyHamster.Contract.OwnerOf(&_NaughtyHamster.CallOpts, tokenId)
}

// PublicMintStartTime is a free data retrieval call binding the NaughtyHamster method 0xd3cf00a3.
//
// Solidity: function publicMintStartTime() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCaller) PublicMintStartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "publicMintStartTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PublicMintStartTime is a free data retrieval call binding the NaughtyHamster method 0xd3cf00a3.
//
// Solidity: function publicMintStartTime() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterSession) PublicMintStartTime() (*big.Int, error) {
	return _NaughtyHamster.Contract.PublicMintStartTime(&_NaughtyHamster.CallOpts)
}

// PublicMintStartTime is a free data retrieval call binding the NaughtyHamster method 0xd3cf00a3.
//
// Solidity: function publicMintStartTime() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCallerSession) PublicMintStartTime() (*big.Int, error) {
	return _NaughtyHamster.Contract.PublicMintStartTime(&_NaughtyHamster.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the NaughtyHamster method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_NaughtyHamster *NaughtyHamsterCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the NaughtyHamster method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_NaughtyHamster *NaughtyHamsterSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _NaughtyHamster.Contract.SupportsInterface(&_NaughtyHamster.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the NaughtyHamster method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_NaughtyHamster *NaughtyHamsterCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _NaughtyHamster.Contract.SupportsInterface(&_NaughtyHamster.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the NaughtyHamster method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NaughtyHamster *NaughtyHamsterCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the NaughtyHamster method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NaughtyHamster *NaughtyHamsterSession) Symbol() (string, error) {
	return _NaughtyHamster.Contract.Symbol(&_NaughtyHamster.CallOpts)
}

// Symbol is a free data retrieval call binding the NaughtyHamster method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NaughtyHamster *NaughtyHamsterCallerSession) Symbol() (string, error) {
	return _NaughtyHamster.Contract.Symbol(&_NaughtyHamster.CallOpts)
}

// TokenURI is a free data retrieval call binding the NaughtyHamster method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_NaughtyHamster *NaughtyHamsterCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the NaughtyHamster method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_NaughtyHamster *NaughtyHamsterSession) TokenURI(tokenId *big.Int) (string, error) {
	return _NaughtyHamster.Contract.TokenURI(&_NaughtyHamster.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the NaughtyHamster method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_NaughtyHamster *NaughtyHamsterCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _NaughtyHamster.Contract.TokenURI(&_NaughtyHamster.CallOpts, tokenId)
}

// TokensOfOwner is a free data retrieval call binding the NaughtyHamster method 0x8462151c.
//
// Solidity: function tokensOfOwner(address owner) view returns(uint256[])
func (_NaughtyHamster *NaughtyHamsterCaller) TokensOfOwner(opts *bind.CallOpts, owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "tokensOfOwner", owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokensOfOwner is a free data retrieval call binding the NaughtyHamster method 0x8462151c.
//
// Solidity: function tokensOfOwner(address owner) view returns(uint256[])
func (_NaughtyHamster *NaughtyHamsterSession) TokensOfOwner(owner common.Address) ([]*big.Int, error) {
	return _NaughtyHamster.Contract.TokensOfOwner(&_NaughtyHamster.CallOpts, owner)
}

// TokensOfOwner is a free data retrieval call binding the NaughtyHamster method 0x8462151c.
//
// Solidity: function tokensOfOwner(address owner) view returns(uint256[])
func (_NaughtyHamster *NaughtyHamsterCallerSession) TokensOfOwner(owner common.Address) ([]*big.Int, error) {
	return _NaughtyHamster.Contract.TokensOfOwner(&_NaughtyHamster.CallOpts, owner)
}

// TotalSupply is a free data retrieval call binding the NaughtyHamster method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the NaughtyHamster method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterSession) TotalSupply() (*big.Int, error) {
	return _NaughtyHamster.Contract.TotalSupply(&_NaughtyHamster.CallOpts)
}

// TotalSupply is a free data retrieval call binding the NaughtyHamster method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NaughtyHamster *NaughtyHamsterCallerSession) TotalSupply() (*big.Int, error) {
	return _NaughtyHamster.Contract.TotalSupply(&_NaughtyHamster.CallOpts)
}

// WithDrawAddr is a free data retrieval call binding the NaughtyHamster method 0x740f8938.
//
// Solidity: function withDrawAddr() view returns(address)
func (_NaughtyHamster *NaughtyHamsterCaller) WithDrawAddr(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NaughtyHamster.contract.Call(opts, &out, "withDrawAddr")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WithDrawAddr is a free data retrieval call binding the NaughtyHamster method 0x740f8938.
//
// Solidity: function withDrawAddr() view returns(address)
func (_NaughtyHamster *NaughtyHamsterSession) WithDrawAddr() (common.Address, error) {
	return _NaughtyHamster.Contract.WithDrawAddr(&_NaughtyHamster.CallOpts)
}

// WithDrawAddr is a free data retrieval call binding the NaughtyHamster method 0x740f8938.
//
// Solidity: function withDrawAddr() view returns(address)
func (_NaughtyHamster *NaughtyHamsterCallerSession) WithDrawAddr() (common.Address, error) {
	return _NaughtyHamster.Contract.WithDrawAddr(&_NaughtyHamster.CallOpts)
}

// Approve is a paid mutator transaction binding the NaughtyHamster method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the NaughtyHamster method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_NaughtyHamster *NaughtyHamsterSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.Approve(&_NaughtyHamster.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the NaughtyHamster method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.Approve(&_NaughtyHamster.TransactOpts, to, tokenId)
}

// OwnerMint is a paid mutator transaction binding the NaughtyHamster method 0xf19e75d4.
//
// Solidity: function ownerMint(uint256 quantity) returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) OwnerMint(opts *bind.TransactOpts, quantity *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "ownerMint", quantity)
}

// OwnerMint is a paid mutator transaction binding the NaughtyHamster method 0xf19e75d4.
//
// Solidity: function ownerMint(uint256 quantity) returns()
func (_NaughtyHamster *NaughtyHamsterSession) OwnerMint(quantity *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.OwnerMint(&_NaughtyHamster.TransactOpts, quantity)
}

// OwnerMint is a paid mutator transaction binding the NaughtyHamster method 0xf19e75d4.
//
// Solidity: function ownerMint(uint256 quantity) returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) OwnerMint(quantity *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.OwnerMint(&_NaughtyHamster.TransactOpts, quantity)
}

// PublicMint is a paid mutator transaction binding the NaughtyHamster method 0x2db11544.
//
// Solidity: function publicMint(uint256 quantity) payable returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) PublicMint(opts *bind.TransactOpts, quantity *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "publicMint", quantity)
}

// PublicMint is a paid mutator transaction binding the NaughtyHamster method 0x2db11544.
//
// Solidity: function publicMint(uint256 quantity) payable returns()
func (_NaughtyHamster *NaughtyHamsterSession) PublicMint(quantity *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.PublicMint(&_NaughtyHamster.TransactOpts, quantity)
}

// PublicMint is a paid mutator transaction binding the NaughtyHamster method 0x2db11544.
//
// Solidity: function publicMint(uint256 quantity) payable returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) PublicMint(quantity *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.PublicMint(&_NaughtyHamster.TransactOpts, quantity)
}

// RenounceOwnership is a paid mutator transaction binding the NaughtyHamster method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the NaughtyHamster method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NaughtyHamster *NaughtyHamsterSession) RenounceOwnership() (*types.Transaction, error) {
	return _NaughtyHamster.Contract.RenounceOwnership(&_NaughtyHamster.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the NaughtyHamster method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _NaughtyHamster.Contract.RenounceOwnership(&_NaughtyHamster.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the NaughtyHamster method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the NaughtyHamster method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_NaughtyHamster *NaughtyHamsterSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SafeTransferFrom(&_NaughtyHamster.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the NaughtyHamster method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SafeTransferFrom(&_NaughtyHamster.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the NaughtyHamster method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the NaughtyHamster method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_NaughtyHamster *NaughtyHamsterSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SafeTransferFrom0(&_NaughtyHamster.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the NaughtyHamster method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SafeTransferFrom0(&_NaughtyHamster.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the NaughtyHamster method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the NaughtyHamster method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_NaughtyHamster *NaughtyHamsterSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SetApprovalForAll(&_NaughtyHamster.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the NaughtyHamster method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SetApprovalForAll(&_NaughtyHamster.TransactOpts, operator, approved)
}

// SetMerkleTreeRoot is a paid mutator transaction binding the NaughtyHamster method 0x4554679f.
//
// Solidity: function setMerkleTreeRoot(bytes32 _devRoot, bytes32 _normalRoot) returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) SetMerkleTreeRoot(opts *bind.TransactOpts, _devRoot [32]byte, _normalRoot [32]byte) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "setMerkleTreeRoot", _devRoot, _normalRoot)
}

// SetMerkleTreeRoot is a paid mutator transaction binding the NaughtyHamster method 0x4554679f.
//
// Solidity: function setMerkleTreeRoot(bytes32 _devRoot, bytes32 _normalRoot) returns()
func (_NaughtyHamster *NaughtyHamsterSession) SetMerkleTreeRoot(_devRoot [32]byte, _normalRoot [32]byte) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SetMerkleTreeRoot(&_NaughtyHamster.TransactOpts, _devRoot, _normalRoot)
}

// SetMerkleTreeRoot is a paid mutator transaction binding the NaughtyHamster method 0x4554679f.
//
// Solidity: function setMerkleTreeRoot(bytes32 _devRoot, bytes32 _normalRoot) returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) SetMerkleTreeRoot(_devRoot [32]byte, _normalRoot [32]byte) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SetMerkleTreeRoot(&_NaughtyHamster.TransactOpts, _devRoot, _normalRoot)
}

// SetMintState is a paid mutator transaction binding the NaughtyHamster method 0x26412aca.
//
// Solidity: function setMintState(bool state) returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) SetMintState(opts *bind.TransactOpts, state bool) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "setMintState", state)
}

// SetMintState is a paid mutator transaction binding the NaughtyHamster method 0x26412aca.
//
// Solidity: function setMintState(bool state) returns()
func (_NaughtyHamster *NaughtyHamsterSession) SetMintState(state bool) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SetMintState(&_NaughtyHamster.TransactOpts, state)
}

// SetMintState is a paid mutator transaction binding the NaughtyHamster method 0x26412aca.
//
// Solidity: function setMintState(bool state) returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) SetMintState(state bool) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SetMintState(&_NaughtyHamster.TransactOpts, state)
}

// SetOpenBoxTime is a paid mutator transaction binding the NaughtyHamster method 0xe2d5e667.
//
// Solidity: function setOpenBoxTime(uint256 openTime) returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) SetOpenBoxTime(opts *bind.TransactOpts, openTime *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "setOpenBoxTime", openTime)
}

// SetOpenBoxTime is a paid mutator transaction binding the NaughtyHamster method 0xe2d5e667.
//
// Solidity: function setOpenBoxTime(uint256 openTime) returns()
func (_NaughtyHamster *NaughtyHamsterSession) SetOpenBoxTime(openTime *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SetOpenBoxTime(&_NaughtyHamster.TransactOpts, openTime)
}

// SetOpenBoxTime is a paid mutator transaction binding the NaughtyHamster method 0xe2d5e667.
//
// Solidity: function setOpenBoxTime(uint256 openTime) returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) SetOpenBoxTime(openTime *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SetOpenBoxTime(&_NaughtyHamster.TransactOpts, openTime)
}

// SetPublicMintStartTime is a paid mutator transaction binding the NaughtyHamster method 0x5fcd80a6.
//
// Solidity: function setPublicMintStartTime(uint256 startTime) returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) SetPublicMintStartTime(opts *bind.TransactOpts, startTime *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "setPublicMintStartTime", startTime)
}

// SetPublicMintStartTime is a paid mutator transaction binding the NaughtyHamster method 0x5fcd80a6.
//
// Solidity: function setPublicMintStartTime(uint256 startTime) returns()
func (_NaughtyHamster *NaughtyHamsterSession) SetPublicMintStartTime(startTime *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SetPublicMintStartTime(&_NaughtyHamster.TransactOpts, startTime)
}

// SetPublicMintStartTime is a paid mutator transaction binding the NaughtyHamster method 0x5fcd80a6.
//
// Solidity: function setPublicMintStartTime(uint256 startTime) returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) SetPublicMintStartTime(startTime *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.SetPublicMintStartTime(&_NaughtyHamster.TransactOpts, startTime)
}

// TransferFrom is a paid mutator transaction binding the NaughtyHamster method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the NaughtyHamster method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_NaughtyHamster *NaughtyHamsterSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.TransferFrom(&_NaughtyHamster.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the NaughtyHamster method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.TransferFrom(&_NaughtyHamster.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the NaughtyHamster method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the NaughtyHamster method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NaughtyHamster *NaughtyHamsterSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.TransferOwnership(&_NaughtyHamster.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the NaughtyHamster method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.TransferOwnership(&_NaughtyHamster.TransactOpts, newOwner)
}

// WhiteListMint is a paid mutator transaction binding the NaughtyHamster method 0x11876875.
//
// Solidity: function whiteListMint(uint256 quantity, bytes32[] proof) returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) WhiteListMint(opts *bind.TransactOpts, quantity *big.Int, proof [][32]byte) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "whiteListMint", quantity, proof)
}

// WhiteListMint is a paid mutator transaction binding the NaughtyHamster method 0x11876875.
//
// Solidity: function whiteListMint(uint256 quantity, bytes32[] proof) returns()
func (_NaughtyHamster *NaughtyHamsterSession) WhiteListMint(quantity *big.Int, proof [][32]byte) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.WhiteListMint(&_NaughtyHamster.TransactOpts, quantity, proof)
}

// WhiteListMint is a paid mutator transaction binding the NaughtyHamster method 0x11876875.
//
// Solidity: function whiteListMint(uint256 quantity, bytes32[] proof) returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) WhiteListMint(quantity *big.Int, proof [][32]byte) (*types.Transaction, error) {
	return _NaughtyHamster.Contract.WhiteListMint(&_NaughtyHamster.TransactOpts, quantity, proof)
}

// WithdrawMoney is a paid mutator transaction binding the NaughtyHamster method 0xac446002.
//
// Solidity: function withdrawMoney() returns()
func (_NaughtyHamster *NaughtyHamsterTransactor) WithdrawMoney(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NaughtyHamster.contract.Transact(opts, "withdrawMoney")
}

// WithdrawMoney is a paid mutator transaction binding the NaughtyHamster method 0xac446002.
//
// Solidity: function withdrawMoney() returns()
func (_NaughtyHamster *NaughtyHamsterSession) WithdrawMoney() (*types.Transaction, error) {
	return _NaughtyHamster.Contract.WithdrawMoney(&_NaughtyHamster.TransactOpts)
}

// WithdrawMoney is a paid mutator transaction binding the NaughtyHamster method 0xac446002.
//
// Solidity: function withdrawMoney() returns()
func (_NaughtyHamster *NaughtyHamsterTransactorSession) WithdrawMoney() (*types.Transaction, error) {
	return _NaughtyHamster.Contract.WithdrawMoney(&_NaughtyHamster.TransactOpts)
}

// NaughtyHamsterApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the NaughtyHamster NaughtyHamster.
type NaughtyHamsterApprovalIterator struct {
	Event *NaughtyHamsterApproval // Event containing the NaughtyHamster specifics and raw log

	contract *bind.BoundContract // Generic NaughtyHamster to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found NaughtyHamster events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NaughtyHamsterApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NaughtyHamsterApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NaughtyHamsterApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NaughtyHamsterApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NaughtyHamsterApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NaughtyHamsterApproval represents a Approval event raised by the NaughtyHamster NaughtyHamster.
type NaughtyHamsterApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the NaughtyHamster event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_NaughtyHamster *NaughtyHamsterFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*NaughtyHamsterApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NaughtyHamster.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &NaughtyHamsterApprovalIterator{contract: _NaughtyHamster.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the NaughtyHamster event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_NaughtyHamster *NaughtyHamsterFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *NaughtyHamsterApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NaughtyHamster.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NaughtyHamsterApproval)
				if err := _NaughtyHamster.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the NaughtyHamster event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_NaughtyHamster *NaughtyHamsterFilterer) ParseApproval(log types.Log) (*NaughtyHamsterApproval, error) {
	event := new(NaughtyHamsterApproval)
	if err := _NaughtyHamster.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NaughtyHamsterApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the NaughtyHamster NaughtyHamster.
type NaughtyHamsterApprovalForAllIterator struct {
	Event *NaughtyHamsterApprovalForAll // Event containing the NaughtyHamster specifics and raw log

	contract *bind.BoundContract // Generic NaughtyHamster to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found NaughtyHamster events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NaughtyHamsterApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NaughtyHamsterApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NaughtyHamsterApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NaughtyHamsterApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NaughtyHamsterApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NaughtyHamsterApprovalForAll represents a ApprovalForAll event raised by the NaughtyHamster NaughtyHamster.
type NaughtyHamsterApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the NaughtyHamster event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_NaughtyHamster *NaughtyHamsterFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*NaughtyHamsterApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _NaughtyHamster.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &NaughtyHamsterApprovalForAllIterator{contract: _NaughtyHamster.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the NaughtyHamster event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_NaughtyHamster *NaughtyHamsterFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *NaughtyHamsterApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _NaughtyHamster.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NaughtyHamsterApprovalForAll)
				if err := _NaughtyHamster.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the NaughtyHamster event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_NaughtyHamster *NaughtyHamsterFilterer) ParseApprovalForAll(log types.Log) (*NaughtyHamsterApprovalForAll, error) {
	event := new(NaughtyHamsterApprovalForAll)
	if err := _NaughtyHamster.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NaughtyHamsterOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the NaughtyHamster NaughtyHamster.
type NaughtyHamsterOwnershipTransferredIterator struct {
	Event *NaughtyHamsterOwnershipTransferred // Event containing the NaughtyHamster specifics and raw log

	contract *bind.BoundContract // Generic NaughtyHamster to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found NaughtyHamster events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NaughtyHamsterOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NaughtyHamsterOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NaughtyHamsterOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NaughtyHamsterOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NaughtyHamsterOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NaughtyHamsterOwnershipTransferred represents a OwnershipTransferred event raised by the NaughtyHamster NaughtyHamster.
type NaughtyHamsterOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the NaughtyHamster event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NaughtyHamster *NaughtyHamsterFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*NaughtyHamsterOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NaughtyHamster.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &NaughtyHamsterOwnershipTransferredIterator{contract: _NaughtyHamster.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the NaughtyHamster event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NaughtyHamster *NaughtyHamsterFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *NaughtyHamsterOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NaughtyHamster.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NaughtyHamsterOwnershipTransferred)
				if err := _NaughtyHamster.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the NaughtyHamster event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NaughtyHamster *NaughtyHamsterFilterer) ParseOwnershipTransferred(log types.Log) (*NaughtyHamsterOwnershipTransferred, error) {
	event := new(NaughtyHamsterOwnershipTransferred)
	if err := _NaughtyHamster.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NaughtyHamsterTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the NaughtyHamster NaughtyHamster.
type NaughtyHamsterTransferIterator struct {
	Event *NaughtyHamsterTransfer // Event containing the NaughtyHamster specifics and raw log

	contract *bind.BoundContract // Generic NaughtyHamster to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found NaughtyHamster events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NaughtyHamsterTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NaughtyHamsterTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NaughtyHamsterTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NaughtyHamsterTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NaughtyHamsterTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NaughtyHamsterTransfer represents a Transfer event raised by the NaughtyHamster NaughtyHamster.
type NaughtyHamsterTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the NaughtyHamster event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_NaughtyHamster *NaughtyHamsterFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*NaughtyHamsterTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NaughtyHamster.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &NaughtyHamsterTransferIterator{contract: _NaughtyHamster.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the NaughtyHamster event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_NaughtyHamster *NaughtyHamsterFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *NaughtyHamsterTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NaughtyHamster.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NaughtyHamsterTransfer)
				if err := _NaughtyHamster.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the NaughtyHamster event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_NaughtyHamster *NaughtyHamsterFilterer) ParseTransfer(log types.Log) (*NaughtyHamsterTransfer, error) {
	event := new(NaughtyHamsterTransfer)
	if err := _NaughtyHamster.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
